#!/bin/ksh
#
#-------------------------------------------------------------------------------
# Run a command to the remote farm
# Author: Manolis Tsangaris, Athena Design System, 2006
#-------------------------------------------------------------------------------

# default settings (for athena design)
  GATE=adsjob@n13
TARGET=siart05
    FS=siart05
   SSH=rssh

function log {
    printf "%10s: %s\n" rfarm "$*" 1>&2
}

function die {
    echo "rfarm: $*" 1>&2
    exit 1
}

function rfarm_target {
    lserver=`uname -n`
    case $lserver in
	bw7)   rserver=siart15 ;;
	tatb2)   rserver=siart25 ;;
	bw8)   rserver=siart05 ;;
	tatu*) rserver=siart05 ;;
	*)     rserver="" ;;
    esac
    echo $rserver
}
 
function rshell { # command
    log "running: $*"
    rssh - "$@"
}

function rsend { # local_dir host:remote_dir/
    log "mirroring $1 to $2"
    rsync -e "$SSH" --delete -azzz  $1/ $2
}

function rrecv { # host:remote_dir local_dir
    log "mirroring $1 to $2"
    rsync -e "$SSH" -azzz  $1/ $2/
}

function rtest {
    log "testing remote farm"
    test "$TARGET" || die "`hostname`: you cannot access the farm from here"
    log "$TARGET: is the target host on the remote farm"
    rshell "uname -n" || die "failed to run remote command"
    log "link to the remote farm appears to be ok"
}
#
# -- First synchronize the current directory to a temp remote one (if LDIR set)
# -- Run the remote command in the remote directory
# -- Syncronize remote directory to the local one (if LDIR is set)
#
function rfarm { # dir command...
    LDIR=$1 ; shift
    CMD="$@"

    case "$LDIR" in
	"") ;;
	*) test -d $LDIR ||  die "$LDIR: no such directory";;
    esac

    RDIR=`hostname`.$$
    if test "$LDIR" 
    then
	rsend $LDIR remhost:$RDIR || cleanup "sending $LDIR to $RDIR failed"
    fi

    test "$CMD" || CMD=$SHELL
    if test "$LDIR"
    then
	rshell "cd $RDIR && $CMD"
    else
	rshell "$@"
    fi
    # -- record the remote exit code
    a=$?
    log "command exited with $a status"

    # -- need to trasfer results and cleanup?
    if test "$LDIR" 
    then
	rrecv remhost:$RDIR $LDIR || cleanup "receiving $RDIR to $LDIR failed"
	rshell "rm -rf $RDIR"
    fi
    return $a
}

function cleanup {
    rshell "rm -rf $RDIR" || log "failed to cleanup $RDIR"
    log "transport error: $*"
    exit 101
}

function usage {
    cat <<EOF

SYNOPSIS
    rfarm [-d dir] [-h]  [-t] command args ...

DESCRIPTION
    rfarm will select a remote host RH from the foreign cluster,
    it will copy 'dir' to a temporary directory there (RDIR), and 
    then it will run a 'command' to the remote host RH, with 
    current directory set to RDIR.

    When done RDIR will be syncronized to 'dir' and RDIR will be
    removed. The exit status of rfarm will reflect the exit status
    of the remote command.

    If dir is not set "." is assummed

    -t will run in test mode

BUGS
    * rfarm uses n13 as a gateway to reach the remote cluster
    * rfarm sends all commands to siart05
    * ssh enabled no password access  needs to be setup on n13/siart05
    * rfarm does not handle ^c at all
    * rfarm does not pass the environment on the remote farm

AUTHOR
    Manolis M. Tsangaris for Athenad Design, 2006
EOF
    return 0
}

# -- this is until they fix tcl exec
exec 2>&1
LDIR=.
dry=""

TARGET=`rfarm_target`
test "$TARGET" || die "`uname -n`: not authorized to use remote farm"
export TARGET=adsjob@$TARGET
    FS=$TARGET

# -- export hosts to have rrsh working
export RFARM_GATE=$GATE
export RFARM_TARGET=$TARGET

while test "$1" 
do
    case "$1" in
	-d) LDIR=$2; shift;;
	-h) usage && exit 1;;
	-t) rtest ; exit $?;;
	-n) dry=1;;
	*) break;;
    esac
    shift
done

# -- now run the actual rfarm command
if test $dry 
then
     echo "running: rfarm $LDIR $@"
else
    rfarm "$LDIR" "$@"
fi
