%{
#include "Crawler.h"
%}
module Dcr
{

#export string gridsize [ 
#usage = "x y dimensions of grid in pixels"; 
#notify=gridsizeChange; ];
#
#export string gridbox [ 
#usage = "x0 y0 x1 y1 virtual grid bounding box in pixels"; 
#notify=gridboxChange; ];
#
#export int planes [ 
#usage = "number of distinct planes to render in grid"; 
#notify=planesChange; ];
#
#export string colors [
#usage = "num/type/objtype RGB - color specific planes of the grid"; 
#notify=colorsChange; ];

	constructor
	(
	);

    export test_ade
    (
        in string cmd [ usage = ""; ]
    );

    export test_milos
    (
        in string cmd [ usage = ""; ]
    );

    export config
    (
        in string grid [ usage = "width height (of the grid to create)" ; ],
        in string bbox [ usage = "xmin ymin xmax ymax (bounding box size)" ;],
        in int    slices [ usage = "number of layers/planes to support"; ],
        in string colors [ usage = "color/layer combinations" ; ]
    );

    export colors
    (
        out string colors [usage = "output variable name for slice colors" ;]
    );

    export paint
    (
    );

    export clear
    (
    );

    export image
    (
        in string encoding [ usage = "base255 or base64" ; ],
        in string format   [ usage = "type of image to generate" ; ],
        in int    quality  [ usage = "jpeg quality factor" ;],
        in int    speed    [ usage = "speed of jpeg conversion" ;],
        in ochannel channel [usage = "write stream" ; ],
        out string ivar [ usage = "output variable name" ; ]
    );


	export init
    (
        in bool add_env [ usage = "add default module(s)"; ],
        in bool store_boxes [ usage = "buffer all drawing objects before send it to channel"; ],
        in string name = "Cdr" [ usage = "instance name of the Crawler" ; ],
        in string module [ usage = "name of the attached module" ; ],
	out zobject dcr [ usage = "return data crawler pointer"; ]
    );
	export get
    (
		out zobject dcr [ usage = "return data crawler pointer"; ]
    );
 	export attach
    (
        in zobject gui [ usage = "add technology module gui interface"; ]
	);

    export inspect
	(
        in string obj  [ usage = "name of the object to inspect"; ],
		in ochannel channel [ usage = "write stream"; ],
        in string chip = "ALL" [ usage = "the name of the chip to use"; ],
        in string attr [ usage = "list of class types"; ],
        in string info [ usage = "type of info to inspect"; ],
        in string bbox   [ usage = "bbox 4 int numbers to clip the results"; ],
        in string layer  [ usage = "list of layers to include"; ],
        in string type   [ usage = "list of obj types to include"; ],
        in string s    [ usage = "type object to select"; ],
        in bool   noclip     [ usage = "do not clip the output"; ],
        in bool   q          [ usage = "this is a cursor query"; ],
        in string hierarchy    [ usage = "hierarchy to select"; ]
	);

    export chip_get
	(
        in string chip = "ALL" [ usage = "name of the chip"; ],
		in ochannel channel [ usage = "write stream"; ],
        in string   bbox       [ usage = "bounding box"; ],
        in string   layer      [ usage = "list of layers to include"; ],
        in string   hierarchy  [ usage = "list of hierarchy to include"; ],
        in string   type       [ usage = "list of obj types to include"; ],
		in string attr [ usage = "list of class types"; ],
        in float  gx = 0.0   [ usage = "GUI grid width in microns"; ],
        in float  gy = 0.0   [ usage = "GUI grid height in microns"; ],
        in int    maxobjects=0 [ usage = "max number of objects to return"; ],
        in bool   noclip     [ usage = "do not clip the output"; ],
        in bool   q          [ usage = "this is a cursor query"; ],
        in bool   grid       [ usage = "use the grid or not"; ]
    );
	export add_menu
	(
        in string name [ usage = "add module menu" ; ]
	);
	export add_sub_menu
	(
        in string menu [ usage = "menu name" ; ],
        in string name [ usage = "sub menu name" ; ]
	);
	export chip_attr_get
	(
		in ochannel channel [ usage = "write stream"; ],
        in string name = "ALL" [ usage = "Chip name" ; ],
        in bool def_types [ usage = "new class fliters" ; ]
	);
	export tiles_get
	(
		in ochannel channel [ usage = "write stream"; ],
        in string name = "ALL" [ usage = "Chip name" ; ]
	);

    export bc_get
    (
     out int bc [ usage = "get count of objects"; ]
    );
        
}
