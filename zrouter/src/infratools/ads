#!/bin/ksh -p
#
# subroutine to generate License environment from msh.conf
#
unset ENV

function die {
	echo "ads: $*" 1>&2
	exit 1
}

args=$@

function get_license_env {
int_lm=""
s_lic=`awk '{print $1}' $ADSHOME/conf/msh.conf | grep "_lic" | cut -d"_" -f1`

for srv in $s_lic
do
	port=`awk '{print $1, $2}' $ADSHOME/conf/msh.conf | grep $srv"_"port" " | awk '{print $2}'`
	svrname=`awk '{print $1, $2}' $ADSHOME/conf/msh.conf | grep $srv"_"lic" " | awk '{print $2}'`
if [[ -z "$LM_LICENSE_FILE" ]] then
# setup license string
	if [[ -z "$int_lm" ]] then
		int_lm=$port"@"$svrname
	elif [[ -z $( echo $int_lm | grep "$port"@"$svrname" ) ]] then
		int_lm=$port"@"$svrname:$int_lm
	fi
else
	if [[ -z $( echo $LM_LICENSE_FILE | grep "$port"@"$svrname" ) && -z $( echo $int_lm | grep "$port"@"$svrname" ) ]] then
		int_lm=$port"@"$svrname:$int_lm
	fi
fi
done
echo $int_lm
}

dir=`dirname $0`
case $dir in
	.) TOP=$(dirname $(pwd)) ;;
	*) TOP=$(dirname $dir) ;;
esac


# default ADSHOME directory
export ADSHOME=$TOP

RC=$ADSHOME/conf/ads.conf

# If multi-processing architecture is not set
if [[ -z $MPT_ARCH ]] then
MPT_ARCH=32
fi

test -f $RC && . $RC

test -d "$ADSHOME" || {
	die "cannot figure out ADSHOME top directory"
}
test -d "$ADSHOME/pubtools/i386-linux/bin"    || die "$ADSHOME: does not contain pubtools"
test -d "$ADSHOME/ads/i386-linux/zrouter" || die "$ADSHOME: does not contain zrouter"

export ADS_PATH=$PATH
export ADS_LD_LIBRARY_PATH=$LD_LIBRARY_PATH

MS1=$ADSHOME/ads/bin:$ADSHOME/pubtools/bin

mlicense=$( get_license_env)
if [[ -z "$LM_LICENSE_FILE" ]] then
export	LM_LICENSE_FILE=$mlicense
else
LM_LICENSE_FILE=$(echo $mlicense:$LM_LICENSE_FILE | sed s/::/:/g )
export	LM_LICENSE_FILE=$LM_LICENSE_FILE
fi

if [ -e $ADSHOME/license/bin/lmstat ] ; then
	ISATHENA=`$ADSHOME/license/bin/lmstat -c $ads_port@$ads_lic | grep athena | cut -d":" -f1`
else
	die "	$ADSHOME/license/bin/lmstat: is missing"
	exit 1
fi

if [ -z $ISATHENA ] ; then
        die "  License Daemon for Athena is not running."
        exit 1
fi

export	PATH=$MS1:$PATH
export	MSHCONFIG=$ADSHOME/conf/msh.conf

case "$1" in 
	ksh) export PS1="ksh(zr)> "; exec ksh -i -p   ;;
	csh) export PS1="csh(zr)> "; exec csh -i   ;;
	zui) export PS1="ksh(zr)> "; exec zui "$@" ;;
	zproxytest) shift 2>/dev/null ; exec zproxytest "$@" ;;
	turborc) shift 2>/dev/null ; exec turborc32 "$@" ;;
	turborc64) shift 2>/dev/null ; exec turborc64 "$@" ;;
	milos) shift 2>/dev/null ; exec milos32 "$@" ;;
	milos64) shift 2>/dev/null ; exec milos64 "$@" ;;
	  *) echo "	Error: $1 is not a Valid Command Option!" ; exit ;;
esac
