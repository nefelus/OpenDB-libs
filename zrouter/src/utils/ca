#!/bin/ksh -p
#
# Wrapper for Third Party EDA tools
# this script sets up the environment to run third party tools with hints from
# conf/msh.conf
#
# tools configuration must follow the following rules
# for EDA wroute the following must appear in msh.conf
#       wroute_top              # Top of wroute binary tree
#       wroute_lic              # Wroute License Server
#       wroute_port             # Wroute License Port
#       wroute_txout            # Wroute License Timeout in second
#                               # wroute_txout = 0 = infinite
#       wroute_slave            # Maximum License for project
#                               # Subset of total license
#                               # wroute_slave = 0 = use all license
# for Imaginary tools xfroute the following must appear in msh.conf
#       xfroute_top
#       xfroute_lic
#       xfroute_port
#       xfroute_txout
#       xfroute_slave
#

function die {
        echo "ca: $*" 1>&2
        exit 1
}

# ###########################################################
# Function setpass: setup port@server and top of tool tree
# Using Global variables from function tool_setup
# No Multi-processing license metering
# ###########################################################
function setpass {
typeset xtool=$1
typeset xconf=$2
tool_setup $xtool $xconf
if [[ -z $(echo $tool_top | grep : ) ]] then
export PATH="$tool_top":$PATH
else
spath=$(echo $tool_top | sed s#:#/bin:#g)
export PATH="$spath/bin":$PATH
fi
if [[ -z $LM_LICENSE_FILE ]] then
export LM_LICENSE_FILE="$tool_port@$tool_lic"
else
export LM_LICENSE_FILE="$tool_port@$tool_lic":$LM_LICENSE_FILE
fi

}

# ####################################################################
# platform_select execute 32/64 bit code according to platform
# function will set variable barch_option according to the tool
# Script will check if option is set later. If not option will be set
# to null
# ####################################################################

function platform_select {
ARCH=$(uname -s).$(uname -m)
case $ARCH in
        Linux.i686)
                barch=32
                ;;
        Linux.x86_64)
                barch=64
                ;;
        *)
                die "unsupport architecture: $ARCH"
                ;;
esac

if [[ "$barch" == "64" ]] ; then
case "$1" in
        wroute) ;;
        nanoroute) ;;
        celtic) ;;
        celtic_ndc) ;;
	quartz_time) ;;
        raphael) ;;
        pt_shell) barch_option="-64" ;;
        pt) barch_option="-64" ;;
        psta) ;;
        *) die "Error Third Party $thirdptool is not support in this version"
                ;;
esac

fi
}

# ####################################################################
# have_lic check license server for license checked out by user
# Require User and Tool feature 
# ####################################################################
function have_lic {
typeset LUSER=$1
typeset lfeat=$2
for feature in $lfeat
	do
	using_lic=$($ADSHOME/license/bin/lmstat -f $feature -c $tool_port@$tool_lic | grep $LUSER);
	if [[ ! -z "$using_lic" ]] then
	sleep 30
	return
	fi
	done
}

# ########################################################################
# Checklic function - checks for available tools license.
# Will loop until license available or timeout is reached
# IF invoke with $user, fairshare will be enforced with an additional
# call to function have_lic.
# ########################################################################
function checklic {
typeset litype=$1
typeset LMSHCONFIG=$2
typeset LADSHOME=$3
typeset LUSER=$4
typeset flist=$tool_feat
if [[ ! -z "$LUSER" ]] then
	have_lic $LUSER $flist
fi
if [[ ! -z "$flist" ]] then
        for feature in $flist
        do
        typeset ISLIC=`$ADSHOME/license/bin/lmstat -a -c $tool_port@$tool_lic | grep $feature`
        if [[ ! -z "$ISLIC" ]] then
        typeset LICCOUNT="0"
        LICCOUNT=`$LADSHOME/license/bin/lmstat -c $tool_port@$tool_lic -f $feature | grep "Users"| awk '{print $6, $11}' | awk '{print $1 - $2}'`
                if [[ "$LICCOUNT" > "0" ]] then
                return 0
                fi
        fi
        done
	while (( "$timeout" < "$tool_txout" ))  
	do
        ((timeout=$timeout+1))
	sleep 30
	checklic $thirdptool $MSHCONFIG $ADSHOME
	done
	die "Retry timeout reached! No available license"
else
        die "Function checklic can not find any $litype features in $LMSHCONFIG"
        exit
fi
}


# ######################################################################
# tool setup: Setup global variable for 3party tools from configuration
# file. msh.conf. Requires tool name and location of msh.conf.
# ######################################################################
function tool_setup {
itool=$1
CONFIGFILE=$2
if [[ -z $( awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_top " ) ]] then
        die "$itool is not setup in $CONFIGFILE"
else
tool_top=`awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_top " | awk '{print $2}'`
        tool_lic=`awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_lic " | awk '{print $2}'`
        tool_port=`awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_port " | awk '{print $2}'`
        tool_slave=`awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_slave " | awk '{print $2}'`
        tool_txout=`awk '{print $1, $2}' $CONFIGFILE | grep "$itool""_txout " | awk '{print $2}'`
        tool_feat=`grep "$itool""_feat" $CONFIGFILE | awk -F\" '{print $2}'`
        tool_cont=`grep "$itool""_control" $CONFIGFILE | awk -F\" '{print $2}'`
fi

# if $tool_cont = local_fairshare set USER
if [[ $tool_cont == "local_fairshare" ]] then
USER=$(/usr/bin/whomai) ;
fi

is_tool=$(whence "$itool" | grep "$itool")
if [[ "$tool_cont" -eq "setup-pass" && -z $is_tool ]] ; then
	tool_feat="setup_pass"
#	export PATH=$tool_top:$PATH
else
	print "Setup and pass option require environment setup for $itool"
	print "User Environment is not setup to run $itool"
	exit 1
fi

if [[ -z $tool_top || -z $tool_lic || -z $tool_port || -z $tool_feat || $tool_cont == '""' ]] then
       	print " $itool top level tools path = $tool_top \n"
       	print " $itool license server       = $tool_lic \n"
       	print " $itool license port         = $tool_port \n"
       	print " $itool feature set for ADS  = $tool_feat \n"
       	print " $itool license control      = $tool_cont \n"
       	die "Problem with tool configure in $CONFIGFILE\n"
fi

# Default retry timeout, if not set
if [[ $tool_txout = @('""'|''|'#') ]]
then
        RETRY=6000
else
        RETRY=$tool_txout
fi
}

# ###################################################################
# Function verify_treelic use global variable from tool_setup 
# Check for existence of licensing binary and active license daemon
# of 3party tool
# ###################################################################
function verify_treelic {
lic_binary=$1/license/bin/lmstat
if [[ ! -e $lic_binary ]]
then
        die "Athena license tree - $ADSHOME/license/bin do not exist"
        exit 1
fi

ISDAEMON=`$lic_binary -c $tool_port@$tool_lic | grep UP `
if [[ $ISDAEMON = '' ]]
then
        print "License DAEMON at $tool_port@$tool_lic is down"
        exit 1
fi
}

# ##############################################################
# verify_env
# Check for valid software tree and existence of msh.conf
# Environment variable ADSHOME and MSHCONFIG must exist.
# Script Changed for internal usage
# ##############################################################
function verify_env {
ADSHOME="/fs/release/Standard"
#ADSHOME=$(env | grep ADSHOME | cut -d"=" -f2)
MSHCONFIG=$(env | grep MSHCONFIG | cut -d"=" -f2)
if [[ -z "$MSHCONFIG" ]] then
	MSHCONFIG=/opt/ads/conf/msh.conf
fi

if [[ ! -d "$ADSHOME" || ! -f "$MSHCONFIG" ]] then
	die "Binary tree/file Missing: ADSHOME=$ADSHOME, MSHCONFIG=$MSHCONFIG"
fi
}

# #####################################################
# Top of Program
# #####################################################

case "$1" in
	wroute) ;;
	nanoroute) ;;
	celtic) ;;
	celtic_ndc) ;;
	quartz_time) ;;
	raphael) ;;
	pt_shell) platform_select $1 ;;
	pt) platform_select $1 ;;
	psta) ;;
	*) die "Error Third Party $thirdptool is not support in this version"
		;;
esac
		
thirdptool=$1
me=$@
just_arg=$(echo $@ | awk -F$thirdptool '{print $2}')
if [[ -z "$barch_option" ]] ; then
barch_option=""
fi
verify_env
if [[ -z $( awk '{print $1, $2}' $MSHCONFIG | grep "$thirdptool""_control " ) ]] then
        die "$thirdptool is not setup in $MSHCONFIG"
else
        tool_cont=`awk '{print $1, $2}' $MSHCONFIG | grep "$thirdptool""_control " | awk '{print $2}'`
fi 
case $tool_cont in
        lsf_control)
		exec $@
		exit
		;;
        local_ulimit)
		;;
        local_fairshare)
		;;
        setup_pass|\"setup_pass\")
		setpass $thirdptool $MSHCONFIG
		exec $thirdptool $barch_option $just_arg
		exit
		;;
#        setup_pass) setpass $thirdptool $MSHCONFIG ; exec $@ ; exit ;;
        rfarm)
		export PATH=/opt/msh/bin:$PATH
		exec rfarm $me
		exit
		;;
	*)
		echo "TOOL_CONT case statement - $tool_cont"
		echo "Should never go here"
		exit
		;;
esac

# Starting Point for local control license utilization
tool_setup $thirdptool $MSHCONFIG
verify_treelic $ADSHOME
# set Global timeout variable to track retry in function checklic
typeset int timeout=0
# Virtual fairshare include user addition
# function will loop until a license is available or retry timeout is reached
if [[ -z $USER ]] then
checklic $thirdptool $MSHCONFIG $ADSHOME
$tool_top/$me
exit
else
checklic $thirdptool $MSHCONFIG $ADSHOME $USER
$tool_top/$me
exit
fi
